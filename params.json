{"name":"Raytracer","tagline":"Raytracer for CSCI 4471 Computer Graphics class project","body":"# Raytracer\r\n\r\n> Raytracer for CSCI 4471 Computer Graphics class project\r\n\r\n## Author\r\n\r\n- [Glavin Wiechert](https://github.com/Glavin001)\r\n\r\n## Compiling\r\n\r\nBuild the executable in `bin/` directory.\r\n\r\n```bash\r\nmake\r\n```\r\n\r\n### Cleaning\r\n\r\n```bash\r\nmake clean\r\n```\r\n\r\n## Usage\r\n\r\nAfter compiling (see above):\r\n\r\n```bash\r\n./bin/raytracer.o\r\n```\r\n\r\n## Testing\r\n\r\n### Unit Testing\r\n\r\n```bash\r\nmake test\r\n```\r\n\r\n### Rendering Sample Scenes\r\n\r\n```bash\r\nmake render\r\n```\r\n\r\nThen look into the `out/` for all of the rendered images.\r\n\r\nYou can also copy and paste the commands that are printed out for each file render.\r\n\r\nFor instance, you may see:\r\n\r\n```bash\r\ncd in/ ; ../bin/raytracer.o -input test_noise_1.txt -size 200 200 -bounces 4 -output ../out/test_noise_1-no_back.bmp -normals ../out/test_noise_1_normals.bmp ; cd ../\r\n```\r\n\r\nYou can easily copy and paste this command to re-render\r\nthis case for input `test_noise_1.txt` with those arguments.\r\n\r\n#### Rendering Arguments\r\n\r\nYou can change the default arguments for `render` task.\r\n\r\n- `PATTERN` - Defaults to `*.txt` - Globbing pattern to select input files from `in/` directory\r\n- `SIZE` - Defaults to `200` - Size of rendered images\r\n- `EXT` - Defaults to `bmp` (`bmp` or `tga` supported) - File extension of rendered images\r\n- `BOUNCES` - Defaults to `4` - # of recursive bounces of a ray, used for reflections\r\n- `SPECIALS` - Defaults to `on` (`on` or `off`) - Render special cases of the input files, such as with depth mapping\r\n\r\n##### Examples\r\n\r\nTo render a single file, use full filename and\r\nforce the pattern to only match one:\r\n\r\n```bash\r\nmake render PATTERN=test_bunny_1k.txt\r\n```\r\n\r\nYou can use [Globbing / patterns](http://tldp.org/LDP/abs/html/globbingref.html) to select input files:\r\n\r\n```bash\r\nmake render PATTERN=test_colored_reflective_sphere_shadows_2*\r\n```\r\n\r\nYou can also change the rendered image size:\r\n\r\n```bash\r\n# Render all images with output size of 1000\r\nmake render SIZE=1000\r\n# Render specific pattern of images with output size of 1000\r\nmake render PATTERN=test_texture_mapping_sphere.txt SIZE=1000\r\n```\r\n\r\nYou can also disable the special custom rendered images:\r\n\r\n```bash\r\nmake render SPECIAL=off\r\n```\r\n\r\n\r\n## Documentation\r\n\r\n### Source Code\r\n\r\nUsing [Doxygen](http://www.stack.nl/~dimitri/doxygen/).\r\n\r\n```bash\r\nmake docs\r\n```\r\n\r\n### Features\r\n\r\n#### Starting Out (5)\r\n\r\n- [✓] **Basic classes, main function (5)**\r\n    - [✓] Material\r\n    - [✓] Hit\r\n    - [✓] Ray\r\n\r\n#### Electives (22)\r\n\r\nYour choice of additional features beyond the specific required ones.\r\n\r\n\r\n#### Primitives and Modeling (29 required)\r\n\r\n- [✓] **Object3D (4 marks)**\r\n\r\nExample Scene:\r\nImplementation Notes:\r\n\r\n- [✓] **Sphere (6)**\r\n\r\n- [✓] **Group (5)**\r\n\r\n- [✓] **Plane (2)**\r\n\r\n- [✓] **Triangle (2)**\r\n\r\n- [✓] **.obj file importer (2)**\r\n\r\n- [✓] **Transformations (8)**\r\n\r\n- [ ] Constructive Solid Geometry (10)\r\n\r\n- [ ] Additional Primitives (3 or more)\r\n\r\n- [ ] 3-D Iterated Function System (8)\r\n\r\n\r\n#### Light Simulation and Illumination (36)\r\n\r\n- [✓] **Diffuse shading (5)**\r\n\r\n- [✓] **Phong model (5)**\r\n\r\n- [✓] **Specular Reflection (10)**\r\n\r\n- [✓] **Basic Shadows (6)**\r\n\r\n- [✓] **Refraction (10)**\r\n\r\n- [ ] Soft Shadows (6)\r\n\r\n- [✓] Multiple light sources (4)\r\n\r\n- [ ] Spotlights (4)\r\n\r\n- [ ] Glossy reflections (7%)\r\n\r\n- [ ] Simple Fog (4)\r\n\r\n- [ ] Volumetric fog (8)\r\n\r\n- [ ] Photon Mapping (15)\r\n\r\n#### Camera and Lens Model (11)\r\n\r\n- [✓] **Camera (2)**\r\n\r\n- [✓] **Orthographic Camera (4)**\r\n\r\n- [✓] **Perspective Camera (5)**\r\n\r\n- [ ] Bloom (4)\r\n\r\n- [ ] Depth-of-field (8)\r\n\r\n- [ ] Fisheye appearance (2)\r\n\r\n- [ ] Oblique Cameras (2)\r\n\r\n- [ ] Other Non-Linear Cameras (4+)\r\n\r\n#### Debugging Tools (12)\r\n\r\n- [✓] **Depth Visualization (4)**\r\n\r\n- [✓] **Back face shading / no shading (4)**\r\n\r\n- [✓] **Normal Visualization (4)**\r\n\r\n- [ ] OpenGL Previsualization Tool (6)\r\n\r\n- [✓] Other Tools (2+)\r\n\r\n I developed https://github.com/Glavin001/RayCapture for the purpose of assisting me with quicker debugging and generating sample input scenes.\r\n\r\n#### Textures (10)\r\n\r\n- [✓] **Simple Procedural (4)**\r\n\r\n- [✓] **Texture Mapping I (6)**\r\n\r\n- [ ] Texture Mapping II (up to 6)\r\n\r\n- [✓] Environment Mapping (5)\r\n> This could be sphere maps or cube maps.\r\n\r\nRaytracer has Cube Map support:\r\n\r\n- [ ] Additional texture model loading (4)\r\n\r\n- [ ] Bump mapping (6)\r\n\r\n#### Acceleration Techniques (0)\r\n\r\n- [ ] Adaptive Ray Depth (5)\r\n\r\n- [ ] Intersection Methods (4)\r\n\r\n- [ ] BSP tree (6)\r\n\r\n- [ ] Grid (6)\r\n\r\n- [ ] Adaptive bounding boxes or bounding spheres (6)\r\n\r\n- [✓] Octree (6)\r\n\r\nRaytracer has Octree support for Meshes loaded by .obj files.\r\n\r\n- [ ] Some other technique of your choice (6)\r\n\r\n#### Distributed Raytracing (0)\r\n\r\n- [ ] Antialiasing (3-5)\r\n\r\n- [ ] Adaptive Antialiasing (4)\r\n\r\n- [ ] Motion Blur (4)\r\n\r\n#### Software Engineering (0)\r\n\r\n- [✓] Source Code Control (4)\r\n\r\nUsing Git and GitHub!\r\n\r\n- [ ] Parallelizing the Raytracer (5)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}